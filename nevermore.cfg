## This is a simple include for the AirFilter. To use it with your printer, edit
## the pin definition in line 16 so it matches your printer.
## What you get:
## - a generic fan "AirFilter" which is adjustable in GCODE and in Mainsail/Fluidd
## - Commands in your 12864-controller to turn the fan on/off or adjust in 10%-steps
## - a Macro to turn the fan off some time after the print.
##
## Slicer integration: Add "SET_FAN_SPEED FAN=AirFilter SPEED=1" in your start-macro
## (or less fan depending on your needs, like SPEED=0.8)
## in your end print code, add "UPDATE_DELAYED_GCODE ID=filter_off DURATION=180"
## this keeps your AirFilter running for 180s after the print finishes to clean the chamber a bit more.

[fan_generic AirFilter]
## The Filter - FAN5 on Octopus
## Adjust if you use a different board or a different terminal.
pin: PD15

[menu __main __control __airfilteronoff]
type: command
name: AirFilter {'ON' if printer['fan_generic AirFilter'].speed > 0 else 'OFF'}
enable: {'fan_generic AirFilter' in printer}
gcode:
    TOGGLE_AIR_FILTER

[menu __main __control __filterspeed]
type: input
enable: {'fan_generic AirFilter' in printer}
name: Filter %: {'%3d' % (menu.input*100)}%
input: {printer["fan_generic AirFilter"].speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode:
    SET_FAN_SPEED FAN=AirFilter SPEED={menu.input}

[delayed_gcode filter_off]
gcode:
    SET_FAN_SPEED FAN=AirFilter SPEED=0

[gcode_macro TOGGLE_AIR_FILTER]
gcode:
    {% if printer['fan_generic AirFilter'].speed > 0 %}
      SET_FAN_SPEED FAN=AirFilter SPEED=0
    {% else %}
      SET_FAN_SPEED FAN=AirFilter SPEED=1
    {% endif %}
